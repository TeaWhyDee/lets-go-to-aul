binop ::= `+´ | `-´ | `*´ | `/´ | `^´ | `%´ | `..´ | 
	 `<´ | `<=´ | `>´ | `>=´ | `==´ | `~=´ | 
	 and | or

unop ::= `-´ | not | `#´

exp ::=  nil | false | true | Number | String | `...´ | function | 
	 prefixexp | tableconstructor | exp binop exp | unop exp 
explist ::= {exp `,´} exp
prefixexp ::= var | functioncall | `(´ exp `)´

// var ::=  Name | prefixexp `[´ exp `]´ | prefixexp `.´ Name  `:`
var ::= Name `:` Type
varlist ::= var {`,´ var}

namelist ::= Name {`,´ Name}
parlist ::= namelist [`,´ `...´] | `...´

function ::= function funcbody
// funcbody ::= `(´ [parlist] `)´ block end
funcbody ::= `(´ [varlist] `)´ block end
funcname ::= Name {`.´ Name} [`:´ Name]
functioncall ::=  prefixexp args | prefixexp `:´ Name args 
args ::=  `(´ [explist] `)´ | tableconstructor | String 

field ::= `[´ exp `]´ `=´ exp | Name `=´ exp | exp
fieldsep ::= `,´ | `;´
fieldlist ::= field {fieldsep field} [fieldsep]
tableconstructor ::= `{´ [fieldlist] `}´


stat ::=  varlist `=´ explist | 
	 functioncall | 
	 do block end | 
	 while exp do block end | 
	 repeat block until exp | 
	 if exp then block {elseif exp then block} [else block] end | 
	 for Name `=´ exp `,´ exp [`,´ exp] do block end | 
	 for namelist in explist do block end | 
	 function funcname funcbody | 
	 local function Name funcbody | 
	 // local namelist [`=´ explist] 
	 local varlist [`=´ explist] 

laststat ::= return [explist] | break

chunk ::= {stat [`;´]} [laststat [`;´]]
block ::= chunk

