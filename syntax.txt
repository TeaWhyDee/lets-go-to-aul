chunk ::= block

block ::= {stat} [retstat]

// removed goto
stat ::=  ‘;’ | 
        varlist ‘=’ explist | 
        functioncall | 
        break | 
        do block end | 
        while exp do block end | 
        repeat block until exp | 
        if exp then block {elseif exp then block} [else block] end | 
        for Name ‘=’ Numeral ‘,’ Numeral [‘,’ Numeral] do block end | 
        for namelist in explist do block end | 
        function Name funcbody | 
        struct Name structbody 

retstat ::= return [explist] [‘;’]

// removed labels (no goto)

varlist ::= var {‘,’ var}

var ::= const Name | Name | const Name ':' type | Name ':' type
        prefixexp ‘[’ exp ‘]’ | prefixexp ‘.’ Name 

namelist ::= Name {‘,’ Name}

explist ::= exp {‘,’ exp}

exp ::=  nil | false | true | Numeral | LiteralString | functiondef | 
        prefixexp | tableconstructor | exp binop exp | unop exp 

prefixexp ::= var | functioncall | ‘(’ exp ‘)’

functioncall ::=  prefixexp ‘(’ [explist] ‘)’ 

functiondef ::= function funcbody

funcbody ::= ‘(’ [parlist] ‘)’ `->` Type block end |
        ‘(’ [parlist] ‘)’ block end

Type ::= num | str | bool | Table | function | Name

Table ::= table `[` Type `,` Type `]`

structbody ::= def

def ::=  ‘;’ | 
        structvarlist ‘=’ explist | 
        function Name funcbody | static function Name funcbody | 
        `new` funcbody

structvarlist ::= structvar {‘,’ structvar}

structvar ::= const Name | Name | const Name ':' type | Name ':' type
        static const Name | static Name | static const Name ':' type | static Name ':' type

// removed ...
parlist ::= namelist

tableconstructor ::= ‘{’ [fieldlist] ‘}’

fieldlist ::= field {fieldsep field} [fieldsep]

field ::= ‘[’ exp ‘]’ ‘=’ exp | Name ‘=’ exp | exp

fieldsep ::= ‘,’ | ‘;’

// removed bitwise ops
binop ::=  ‘+’ | ‘-’ | ‘*’ | ‘/’ | ‘//’ | ‘^’ | ‘%’ | ‘..’ | 
        ‘<’ | ‘<=’ | ‘>’ | ‘>=’ | ‘==’ | ‘~=’ | 
        and | or

// removed tilde again
unop ::= ‘-’ | not | ‘#’
